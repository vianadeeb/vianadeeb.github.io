{"remainingRequest":"C:\\Users\\Vian A. Noori\\Documents\\vue courses\\p\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Vian A. Noori\\Documents\\vue courses\\p\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Vian A. Noori\\Documents\\vue courses\\p\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Vian A. Noori\\Documents\\vue courses\\p\\src\\pages\\Aboutme.vue?vue&type=template&id=4c0e3b1e&scoped=true&","dependencies":[{"path":"C:\\Users\\Vian A. Noori\\Documents\\vue courses\\p\\src\\pages\\Aboutme.vue","mtime":1594246287495},{"path":"C:\\Users\\Vian A. Noori\\Documents\\vue courses\\p\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Vian A. Noori\\Documents\\vue courses\\p\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Vian A. Noori\\Documents\\vue courses\\p\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Vian A. Noori\\Documents\\vue courses\\p\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}